import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

data = pd.read_excel('dataset.xlsx')
scaler = MinMaxScaler()
df_normalized = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)
data=df_normalized

# Elbow method to determine the optimal value of K
ks = range(1, 15)
wcss = []
for k in ks:
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(data)
    wcss.append(kmeans.inertia_)
plt.plot(ks, wcss, marker='o', linestyle='-')
plt.xlabel('Número de clústers (k)')
plt.ylabel('WCSS')
#plt.title('Método del codo para K-means')
plt.show()

# K-Means modle with 6 clusters 
kmeans = KMeans(n_clusters=6)
kmeans.fit(data)

# labels and centroids
labels = kmeans.labels_
centroids = kmeans.cluster_centers_

# Calculate the distance of each point to the centroid of its cluster.
distances = np.linalg.norm(data - centroids[labels], axis=1)

# Definition of the anomaly threshold and anomaly detection
umbral = 0.41
anomalias = data[distances > umbral]

# Results
print("Number of anomalies detected:", len(anomalias))
print(anomalias)
anomaly_index=anomalias.index
print(anomaly_index)
anomalias.to_excel('K_Means_anomalias.xlsx')

# Davies Bouldin index
from sklearn.metrics import davies_bouldin_score
print(davies_bouldin_score(data, labels))

# Silohuette index
import numpy as np
from sklearn.metrics import silhouette_score
silhouette_avg = silhouette_score(data, labels)
print(silhouette_avg)

# Confusion matrix
from sklearn.metrics import confusion_matrix, precision_score, recall_score, accuracy_score, f1_score
import seaborn as sns
dat = pd.read_excel('tdaytdf.xlsx')
etiq_verdadera=dat['anom']
etiq_predicha=dat['k_means']
cm = confusion_matrix(etiq_verdadera, etiq_predicha,labels=[0, 1])
print(cm)

# True Positives
VP = cm[0, 0]
# True Negatives
VN = cm[1, 1]
# False Positives (FP)
FP = cm[1, 0]
# False Negatives (FN)
FN = cm[0, 1]

TDA= VP/(VP+FN)  # Anomaly Detection Rate (ADR)
TFA=FP/(VN+FP)   # False Alarm Rate (FAR)
print("Anomaly Detection Rate (ADR):", TDA)
print("False Alarm Rate (FAR):", TFA)
